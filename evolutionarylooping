#!/usr/bin/env python3.4

from sys import path
path.append('src')

if __name__ == "__main__":
    from src.main.main import LoopingGifFinder
    import argparse
    parser = argparse.ArgumentParser(description='Find Looping GIFs in Video files')
    parser.add_argument('--min_d', type=int, help='the minimum loop length in seconds')
    parser.add_argument('--max_d', type=int, help='the maximum loop length in seconds')
    parser.add_argument('-t', '--threshold', type=int, help='how perfect shall the loop be?')
    parser.add_argument('-g', '--max_gen', type=int, help='maximum generations')
    parser.add_argument('-p', '--popsize', type=int, help='the population size')
    parser.add_argument('-r', '--recombination_rate', type=float, help='the recombination rate to use')
    parser.add_argument('-m', '--mutation_rate', type=float, help='the mutation rate to use')
    parser.add_argument('-e', '--elites', type=int, help='the amount of elites')
    parser.add_argument('-er', '--elite_recombinations', type=int, help='the amount of elites')
    parser.add_argument('-o', '--output', help='file prefix for output gifs')
    parser.add_argument('clip', help='the video clip you want to analyse')
    args = parser.parse_args()

    lgf = LoopingGifFinder(
        args.clip,
        args.min_d,
        args.max_d,
        args.threshold,
        args.max_gen,
        args.popsize,
        args.elites,
        args.elite_recombinations,
        args.recombination_rate,
        args.mutation_rate
    )

    lgf.run()

    if (args.output is not None):
        lgf.results_to_gif(args.output)
